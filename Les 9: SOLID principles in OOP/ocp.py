from abc import ABC, abstractmethod

class DiscountCalculator(ABC):
    def __init__(self, cost: float, discount: float):
        self.cost = cost
        self.discount = discount  # % –∑–Ω–∏–∂–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Å—è—Ç–∫–æ–≤–æ–≥–æ –¥—Ä–æ–±—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.1 = 10%)

    @abstractmethod
    def get_discounted_product(self) -> float:
        """–û–±—á–∏—Å–ª—é—î –∑–Ω–∏–∂–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–Ω—Ü–µ–≤—É —Ü—ñ–Ω—É"""
        return self.cost - (self.cost * self.discount)

    def __str__(self) -> str:
        return f"{self.__class__.__name__}: {self.get_discounted_product():.2f} –≥—Ä–Ω"


class DiscountCalculatorShirt(DiscountCalculator):
    def __init__(self, cost: float):
        super().__init__(cost, 0.10)  # 10% –∑–Ω–∏–∂–∫–∏

    def get_discounted_product(self) -> float:
        return super().get_discounted_product()


class DiscountCalculatorTShirt(DiscountCalculator):
    def __init__(self, cost: float):
        super().__init__(cost, 0.15)  # 15% –∑–Ω–∏–∂–∫–∏

    def get_discounted_product(self) -> float:
        return super().get_discounted_product()


class DiscountCalculatorPant(DiscountCalculator):
    def __init__(self, cost: float):
        super().__init__(cost, 0.20)  # 20% –∑–Ω–∏–∂–∫–∏

    def get_discounted_product(self) -> float:
        return super().get_discounted_product()


# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
items = [
    DiscountCalculatorShirt(100),
    DiscountCalculatorTShirt(1000),
    DiscountCalculatorPant(500),
]

# üîπ –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
for item in items:
    print(item)
