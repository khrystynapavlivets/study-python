# –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü—Ä–∏–Ω—Ü–∏–ø —î–¥–∏–Ω–æ–≥–æ –æ–±–æ–≤'—è–∑–∫—É (Single Responsibility Principle - SRP)
# –°–ø—Ä–æ–µ–∫—Ç—É–π—Ç–µ —ñ —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –∫–ª–∞—Å "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á" (User), —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∏–Ω—Ü–∏–ø—É SRP.
# –í —Ü—å–æ–º—É –∫–ª–∞—Å—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–æ–∂–µ–Ω –º–µ—Ç–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é.
#
# import json
#
#
# class User:
#     def __init__(self, user_id, name, email):
#         self.user_id = user_id
#         self.name = name
#         self.email = email
#
#     def update_user_name(self, new_user):
#         """Updates name data and return update data."""
#         self.name = new_user
#         return self.get_user_info()
#
#     def update_user_email(self, new_email):
#         """Updates email data and return update data."""
#         self.email = new_email
#         return self.get_user_info()
#
#     def get_user_info(self):
#         """Returns information about the user."""
#         return {
#             "user_id": self.user_id,
#             "name": self.name,
#             "email": self.email
#         }
#
#
# class UserStorage:
#     def __init__(self, filename="users.json"):
#         self.filename = filename
#
#     def save_users(self, users):
#         """Save a list of users to a JSON file."""
#         with open(self.filename, "w") as f:
#             json.dump({uid: user.get_user_info() for uid, user in users.items()}, f)
#
#     def load_users(self):
#         """Load a list of users from a JSON file."""
#         try:
#             with open(self.filename, "r") as f:
#                 users_data = json.load(f)
#                 return {
#                     int(uid): User(data["user_id"], data["name"], data["email"])
#                     for uid, data in users_data.items()
#                 }
#         except (FileNotFoundError, json.JSONDecodeError):
#             return {}
#
#
# class UserManager:
#     def __init__(self, storage: UserStorage):
#         self.users = {}
#         self.storage = storage
#
#     def create_user(self, user_id: int, name: str, email: str):
#         """Create a new user"""
#         self.users[user_id] = User(user_id, name, email)
#         self.storage.save_users(self.users)
#         return self.users[user_id]
#
#     def delete_user(self, user_id: int):
#         """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
#         if user_id in self.users:
#             del self.users[user_id]  # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#             self.storage.save_users(self.users)
#             print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
#         else:
#             print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
#
#     def load_users(self):
#         """Load users from file."""
#         self.users = self.storage.load_users()
#
#
# storage = UserStorage()
# manager = UserManager(storage)
# user = manager.create_user(1, "Oleg", "oleg@example.com")
# print(user.get_user_info())
# user_1 = manager.create_user(2, "Dima", "dima@gmail.com")
# manager.delete_user(1)
#
# print(user_1.get_user_info())
# print("Current list of users:", {uid: user.get_user_info() for uid, user in manager.users.items()})
#
# manager.delete_user(1)

# –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü—Ä–∏–Ω—Ü–∏–ø –≤—ñ–¥–∫—Ä–∏—Ç–æ—Å—Ç—ñ/–∑–∞–∫—Ä–∏—Ç–æ—Å—Ç—ñ (Open/Closed Principle - OCP)
# –°—Ç–≤–æ—Ä—ñ—Ç—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–§—ñ–≥—É—Ä–∞" (Shape) —Ç–∞ –¥–≤–∞ –∫–ª–∞—Å–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å —Ü–µ–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–æ–ª–æ" (Circle) —Ç–∞ "–ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫" (Rectangle).
# –ü–æ—Ç—ñ–º –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π –∫–ª–∞—Å, —è–∫–∏–π —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø–ª–æ—â—É –±—É–¥—å-—è–∫–æ—ó —Ñ—ñ–≥—É—Ä–∏, –Ω–µ –º–æ–¥–∏—Ñ—ñ–∫—É—é—á–∏ —ñ—Å–Ω—É—é—á—ñ –∫–ª–∞—Å–∏.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø OCP –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.

# –ó–∞–≤–¥–∞–Ω–Ω—è 3: –ü—Ä–∏–Ω—Ü–∏–ø –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ—ñ—Å–∫–æ–≤ (Liskov Substitution Principle - LSP)
# –°—Ç–≤–æ—Ä—ñ—Ç—å —ñ—î—Ä–∞—Ä—Ö—ñ—é –∫–ª–∞—Å—ñ–≤ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö —Ñ—ñ–≥—É—Ä, –¥–µ –∫–æ–∂–µ–Ω –ø—ñ–¥–∫–ª–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–≤–∞–¥—Ä–∞—Ç" —ñ "–ö—Ä—É–≥") –º–æ–∂–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å "–§—ñ–≥—É—Ä–∞" –±–µ–∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü—ñ –ø—ñ–¥–∫–ª–∞—Å–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∑–∞–º—ñ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É —É –≤—Å—ñ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö –±–µ–∑ –ø—Ä–æ–±–ª–µ–º.

# from abc import ABC, abstractmethod
# import math
#
#
# class Shape(ABC):
#     """Abstract class for all shapes"""
#
#     @abstractmethod
#     def calculate_area(self) -> float:
#         """Abstract method for calculating area"""
#         pass
#
#
# class Circle(Shape):
#     def __init__(self, radius):
#         super().__init__()
#         self.__radius = radius
#
#     def calculate_area(self):
#         area = round(math.pi * self.__radius ** 2, 2)
#         return area
#         # return print(f"Area of the circle with radius {self.__radius} is equal to {area:.2f}")
#
#
# class Rectangle(Shape):
#     def __init__(self, width, height):
#         super().__init__()
#         self.__width = width
#         self.__height = height
#
#     def calculate_area(self):
#         area = self.__height * self.__width
#         return area
#         # return  print(f"Area of the rectangle with sides {self.__width} and {self.__height} is equal to {area:.2f}")
#
#
# class Triangle(Shape):
#     def __init__(self, base_of_height, height):
#         super().__init__()
#         self.__base_of_height = base_of_height
#         self.__height = height
#
#     def calculate_area(self):
#         area = 0.5 * self.__base_of_height * self.__height
#         return area
#         # print(f"Area of the triangle with the base of the height {self.__base_of_height} and height {self.__height} is equal to {area:.2f}")
#
#
# class AreaShape:
#     @staticmethod
#     def area_shape(shape: Shape):
#         """Class for calculating the area of any shape"""
#         return shape.calculate_area()
#
#
# circle = Circle(5)
# rectangle = Rectangle(3, 5)
# triangle = Triangle(3, 8)
#
# print("Area of circle: ", AreaShape.area_shape(circle))
# print("Area of rectangle: ", AreaShape.area_shape(rectangle))
# print("Area of triangle: ", AreaShape.area_shape(triangle))


# –ó–∞–≤–¥–∞–Ω–Ω—è 4: –ü—Ä–∏–Ω—Ü–∏–ø —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Interface Segregation Principle - ISP)
# –†–æ–∑—Ä–æ–±—ñ—Ç—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–ú–µ—Ä–µ–∂–µ–≤–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä" (NetworkPrinter), —è–∫–∏–π –≤–∫–ª—é—á–∞—î –º–µ—Ç–æ–¥–∏ –¥–ª—è –¥—Ä—É–∫—É, —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.
# –ü–æ—Ç—ñ–º —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–≤–∞ –∫–ª–∞—Å–∏: "–ü—Ä–∏–Ω—Ç–µ—Ä" (Printer) —Ç–∞ "–°–∫–∞–Ω–µ—Ä" (Scanner), —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å —Ü–µ–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–∏—à–µ —Ç—ñ –º–µ—Ç–æ–¥–∏, —è–∫—ñ —ó–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∂–æ–¥–µ–Ω –∑ –∫–ª–∞—Å—ñ–≤ –Ω–µ –º–∞—î –ø—É—Å—Ç–æ–≥–æ –º–µ—Ç–æ–¥—É.

from abc import ABC, abstractmethod

class Printable(ABC):
    """Separate interface for printing"""

    @abstractmethod
    def print_document(self, document: str):
        pass


class Scannable(ABC):
    """Separate interface for scanning"""

    @abstractmethod
    def scan_document(self):
        pass


class Copyable(ABC):
    """Separate interface for coping"""

    @abstractmethod
    def copy_document(self):
        pass


class Printer(Printable):
    """Printer class (implements printing only)"""

    def print_document(self, document: str):
        print(f"Printing: {document}")


class Scanner(Scannable):
    """Scanner class (implements scanning only)"""

    def scan_document(self):
        print("Scanning document...")


class MultiFunctionDevice(Printable, Scannable, Copyable):
    """Multifunction device (implements all functions)"""

    def print_document(self, document: str):
        print(f"Printing: {document}")

    def scan_document(self):
        print("Scanning document...")

    def copy_document(self):
        print("Copying document...")


printer = Printer()
printer.print_document("Report.pdf")

scanner = Scanner()
scanner.scan_document()

mfp = MultiFunctionDevice()
mfp.print_document("Contract.pdf")
mfp.scan_document()
mfp.copy_document()

# –ó–∞–≤–¥–∞–Ω–Ω—è 5: –ü—Ä–∏–Ω—Ü–∏–ø –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (Dependency Inversion Principle - DIP)
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–∏–Ω—Ü–∏–ø DIP, –ø–µ—Ä–µ—Ä–æ–±—ñ—Ç—å –∫–æ–¥ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —É –≤–∞—à–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç–∞–∫, —â–æ–± –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –∑–∞–º—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π.
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–ª–∞—Å–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞—é—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —ñ–Ω—à–∏—Ö –∫–ª–∞—Å—ñ–≤.

from abc import ABC, abstractmethod

# üîπ 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—é –¥–ª—è –ë–î
class Database(ABC):
    @abstractmethod
    def connect(self):
        pass

# üîπ 2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class MySQLDatabase(Database):
    def connect(self):
        return "Connected to MySQL Database"

class PostgreSQLDatabase(Database):
    def connect(self):
        return "Connected to PostgreSQL Database"

# üîπ 3. UserService –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –∞ –Ω–µ –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É
class UserService:
    def __init__(self, database: Database):  # –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        self.db = database

    def get_users(self):
        connection = self.db.connect()
        return f"{connection}. Fetching users..."

# üîπ 4. –õ–µ–≥–∫–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
mysql_db = MySQLDatabase()
user_service = UserService(mysql_db)
print(user_service.get_users())  # ‚úÖ "Connected to MySQL Database. Fetching users..."

postgres_db = PostgreSQLDatabase()
user_service = UserService(postgres_db)
print(user_service.get_users())  # ‚úÖ "Connected to PostgreSQL Database. Fetching users..."
